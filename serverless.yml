#plugins:
#  - serverless-log-forwarding

custom:
  pythonRequirements:
    dockerizePip: false
  logForwarding:
    destinationARN: {"Fn::ImportValue": "${env:SUMOLOGIC_LAMBDA_ARN_EXPORT_NAME}"}

service: MV-SLS-slack-curated-sql

provider:
  name: aws
  runtime: python3.6
  stage: ${env:ENV}
  memory: 128
  region: ${env:AWS_REGION}
  variableSyntax: "\\${(?!AWS::)(env:[ :a-zA-Z0-9._,\\-\\/\\(\\)]+?)}"
  stackTags:
    FRAMEWORK: serverless
  environment:
    ENV: ${env:ENV}

package:
  artifact: package/package.zip

functions:
  command:
    handler: lambda.handler
    events:
      - http: POST command
  button:
    handler: lambda.button_handler
    events:
      - http: POST button

#resources:
#  Resources:
#    DomainName:
#      Type: "AWS::ApiGateway::DomainName"
#      Properties:
#        CertificateArn: ${env:AWS_ACM_CERTIFICATE}
#        DomainName: ${env:DOMAIN_NAME}
#    BasePathMapping:
#      Type: "AWS::ApiGateway::BasePathMapping"
#      Properties:
#        BasePath: "account"
#        DomainName:
#          Ref: DomainName
#        RestApiId: { "Ref": "ApiGatewayRestApi" }
#        Stage: ${env:ENV}
#    RecordSet:
#      Type: AWS::Route53::RecordSet
#      Properties:
#        HostedZoneName: ${env:AWS_HOSTED_ZONE}.
#        Name: ${env:DOMAIN_NAME}
#        Type: A
#        AliasTarget:
#          HostedZoneId: "Z2FDTNDATAQYW2"
#          DNSName:
#            Fn::GetAtt: [ "DomainName", "DistributionDomainName" ]
#    RecordSetAAAA:
#      Type: AWS::Route53::RecordSet
#      Properties:
#        HostedZoneName: ${env:AWS_HOSTED_ZONE}.
#        Name: ${env:DOMAIN_NAME}
#        Type: AAAA
#        AliasTarget:
#          HostedZoneId: "Z2FDTNDATAQYW2"
#          DNSName:
#            Fn::GetAtt: [ "DomainName", "DistributionDomainName" ]
#  Outputs:
#    LambdaUrl:
#      Value: "https://${env:DOMAIN_NAME}"
#    CloudFrontDomainName:
#      Value:
#        Fn::GetAtt: [ 'DomainName', 'DistributionDomainName' ]
